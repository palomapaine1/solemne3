# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0fIl6AsDlfP7jvP5XyYYPHWhimSvFwA
"""

import streamlit as st
import pandas as pd
import requests

# Cargar los datos
file_path = "datos_paises_procesados.xlsx"
df = pd.read_excel(file_path)

# Configurar la estructura de la aplicación multipágina
st.set_page_config(page_title="Aplicación Multipágina - Streamlit", layout="wide")

# Crear las páginas
def pagina_descripcion():
    st.title("Descripción del Proyecto")
    st.write("""
    Este proyecto utiliza datos sobre países, incluyendo información como población, área, 
    número de fronteras, idiomas oficiales y zonas horarias. El objetivo es interactuar con 
    estos datos y realizar análisis visuales y estadísticos.
    
    Los datos fueron obtenidos de una base de datos ficticia que simula información global 
    de países. Este conjunto de datos puede ser utilizado para explorar diversos aspectos geográficos.
    """)
    st.markdown("[Enlace a la fuente de datos ficticia](https://example.com)")
    st.write("Vista previa de los datos:")
    st.dataframe(df)

def pagina_interaccion():
    st.title("Interacción con los Datos")

    # Mostrar los datos originales
    if st.checkbox("Mostrar datos originales"):
        st.dataframe(df)

    # Selección de columna para estadísticas
    columna = st.selectbox("Selecciona una columna numérica para análisis estadístico:", 
                           ["Poblacion_total", "Area_km²", "Numero_frontera", "Numero_idiomas", "Numero_zonas_horarias"])
    if columna:
        st.write(f"**Análisis Estadístico de la columna {columna}:**")
        st.write(f"Media: {df[columna].mean():,.2f}")
        st.write(f"Mediana: {df[columna].median():,.2f}")
        st.write(f"Desviación estándar: {df[columna].std():,.2f}")

    # Ordenar los datos
    columna_ordenar = st.selectbox("Selecciona una columna para ordenar los datos:", 
                                   ["Poblacion_total", "Area_km²", "Numero_frontera", "Numero_idiomas", "Numero_zonas_horarias"])
    if columna_ordenar:
        orden = st.radio("Selecciona el orden:", ["Ascendente", "Descendente"])
        df_ordenado = df.sort_values(by=columna_ordenar, ascending=(orden == "Ascendente"))
        st.dataframe(df_ordenado)

    # Filtrar filas
    columna_filtrar = "Poblacion_total"  # Se elige arbitrariamente
    rango = st.slider("Selecciona un rango de población:", 
                      int(df[columna_filtrar].min()), int(df[columna_filtrar].max()), 
                      (int(df[columna_filtrar].min()), int(df[columna_filtrar].max())))
    df_filtrado = df[(df[columna_filtrar] >= rango[0]) & (df[columna_filtrar] <= rango[1])]
    st.write("Datos filtrados:")
    st.dataframe(df_filtrado)

    # Botón para descargar los datos filtrados
    @st.cache
    def convertir_csv(df):
        return df.to_csv(index=False).encode('utf-8')

    csv = convertir_csv(df_filtrado)
    st.download_button(label="Descargar datos filtrados en CSV", 
                       data=csv, 
                       file_name="datos_filtrados.csv", 
                       mime="text/csv")

def pagina_graficos():
    st.title("Gráficos Interactivos")

    # Selección de variables
    st.sidebar.header("Configuración del gráfico")
    x = st.sidebar.selectbox("Selecciona la variable para el eje X:", 
                             ["Poblacion_total", "Area_km²", "Numero_frontera", "Numero_idiomas", "Numero_zonas_horarias"])
    y = st.sidebar.selectbox("Selecciona la variable para el eje Y:", 
                             ["Poblacion_total", "Area_km²", "Numero_frontera", "Numero_idiomas", "Numero_zonas_horarias"])

    # Rango personalizado
    rango_x = st.sidebar.slider(f"Rango para {x}:", 
                                int(df[x].min()), int(df[x].max()), 
                                (int(df[x].min()), int(df[x].max())))
    rango_y = st.sidebar.slider(f"Rango para {y}:", 
                                int(df[y].min()), int(df[y].max()), 
                                (int(df[y].min()), int(df[y].max())))

    # Selección del tipo de gráfico
    tipo_grafico = st.sidebar.radio("Selecciona el tipo de gráfico:", 
                                    ["Dispersión", "Línea", "Barras", "Histograma"])

    # Generar el gráfico
    plt.figure(figsize=(10, 6))
    if tipo_grafico == "Dispersión":
        plt.scatter(df[x], df[y], alpha=0.7)
    elif tipo_grafico == "Línea":
        plt.plot(df[x], df[y], alpha=0.7)
    elif tipo_grafico == "Barras":
        plt.bar(df[x], df[y], alpha=0.7)
    elif tipo_grafico == "Histograma":
        plt.hist(df[x], bins=20, alpha=0.7, label=x)
        plt.hist(df[y], bins=20, alpha=0.7, label=y)
        plt.legend()

    plt.title(f"{tipo_grafico} de {x} vs {y}")
    plt.xlim(rango_x)
    plt.ylim(rango_y)
    plt.xlabel(x)
    plt.ylabel(y)
    st.pyplot(plt)

    # Botón para descargar el gráfico
    st.sidebar.download_button(label="Descargar gráfico en PNG",
                                data=plt.savefig("grafico.png"),
                                file_name="grafico.png",
                                mime="image/png")

# Seleccionar la página
pagina = st.sidebar.selectbox("Selecciona una página:", 
                              ["Descripción del Proyecto", "Interacción con los Datos", "Gráficos Interactivos"])

if pagina == "Descripción del Proyecto":
    pagina_descripcion()
elif pagina == "Interacción con los Datos":
    pagina_interaccion()
elif pagina == "Gráficos Interactivos":
    pagina_graficos()

