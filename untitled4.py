# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0fIl6AsDlfP7jvP5XyYYPHWhimSvFwA
"""

import pandas as pd
import requests
import streamlit as st

# Título de la aplicación
st.title('Aplicación Web: Datos desde una API REST')
# URL de la API REST (puedes cambiarla por cualquier API pública que devuelva JSON)
api_url = 'https://jsonplaceholder.typicode.com/posts'
# Realizar la petición a la API
response = requests.get(api_url)
# Verificar que la respuesta sea exitosa (código 200)
if response.status_code == 200:
    # Convertir los datos JSON en un DataFrame de Pandas
    data = response.json()
    df = pd.DataFrame(data)
    # Mostrar los primeros registros
    st.write('Datos obtenidos de la API:')
    st.write(df.head())
else:
    st.error('Error al obtener los datos de la API')

# Si hay datos, mostrar el DataFrame, mostrar dataframe con las columna seleccionadas, permitir filtrado y mostrar gráficos.

if df is not None:
    st.write(df.head())

# Selección de columnas relevantes
    df['Nombre'] = df['name'].apply(lambda x: x.get('common') if isinstance(x, dict) else None)
    df['Región'] = df['region']
    df['Población'] = df['population']
    df['Área (km²)'] = df['area']
    df['Fronteras'] = df['borders'].apply(lambda x: len(x) if isinstance(x, list) else 0)
    df['Idiomas Oficiales'] = df['languages'].apply(lambda x: len(x) if isinstance(x, dict) else 0)
    df['Zonas Horarias'] = df['timezones'].apply(lambda x: len(x) if isinstance(x, list) else 0)

    # Filtrar columnas seleccionadas
    columnas = ['Nombre', 'Región', 'Población', 'Área (km²)', 'Fronteras', 'Idiomas Oficiales', 'Zonas Horarias']
    df_cleaned = df[columnas]
    # Mostrar DataFrame con las columnas seleccionadas
    st.title("Interacción con los datos:")
    st.write("Mostrar datos originales:")
    st.dataframe(df_cleaned)
    import streamlit as st
import pandas as pd
import requests

# Función para obtener datos desde la API
@st.cache_data
def fetch_data():
    url = "https://restcountries.com/v3.1/all"
    response = requests.get(url)
    data = response.json()
    countries = []
    for country in data:
        try:
            countries.append({
                "Nombre": country.get("name", {}).get("common", "Desconocido"),
                "Población": country.get("population", 0),
                "Área (km²)": country.get("area", 0),
                "Fronteras": len(country.get("borders", [])),
                "Idiomas": len(country.get("languages", {})),
                "Zonas Horarias": len(country.get("timezones", []))})
        except Exception as e:
            print(f"Error procesando el país: {e}")
    return pd.DataFrame(countries)

# Obtener los datos
data = fetch_data()

# Configurar la aplicación de Streamlit
st.title("Cálculo Estadístico de Columnas")
st.write("Seleccione una columna del conjunto de datos obtenido de la API REST Countries para calcular estadísticas.")

# Mostrar datos originales si el usuario lo solicita
if st.checkbox("Mostrar datos originales"):
    st.dataframe(data)

# Menú desplegable para seleccionar una columna
columna = st.selectbox(
    "Seleccione una columna para calcular estadísticas:",
    ["Población", "Área (km²)", "Fronteras", "Idiomas", "Zonas Horarias"])

# Calcular estadísticas
if columna:
    st.write(f"**Estadísticas para la columna {columna}:**")
    media = data[columna].mean()
    mediana = data[columna].median()
    desviacion = data[columna].std()

    st.write(f"- Media: {media:,.2f}")
    st.write(f"- Mediana: {mediana:,.2f}")
    st.write(f"- Desviación estándar: {desviacion:,.2f}")

    

